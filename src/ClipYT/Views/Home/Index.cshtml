@using ClipYT.Constants;
@model VideoModel
@{
    ViewData["Title"] = "Home Page";
}

<div class="d-flex flex-column align-items-center content">
    <div class="mb-4" id="player-container">
        <div id="player"></div>
    </div>

    @using (Html.BeginForm("DownloadVideo", "Home", FormMethod.Post, new { id = "app-form" }))
    {
        <div class="d-flex flex-column gap-1 mb-4">
            <div class="d-flex gap-3">
                @Html.TextBoxFor(m => m.Url, new { id = "urlInput", placeholder = "Paste YouTube video URL" })
                <button title="Generate clip" class="play-button"><i class="bi bi-play-circle-fill"></i></button>
            </div>
            <span class="text-danger validation-message">@Html.ValidationMessageFor(m => m.Url)</span>
        </div>

        <div id="video-details">
            <div class="d-flex align-items-center gap-3 justify-content-between flex-wrap mb-4">
                <div class="d-flex flex-column align-items-center">
                    <div>
                        <span class="thick">From:</span>
                        @Html.TextBoxFor(m => m.StartTimestamp, new { id = "videoStartInput", placeholder = "hh:mm:ss", @class = "timeInput" })
                        <button type="button" title="Get current time" class="btn standard-btn" onclick="updateInputFromPlayer('videoStartInput')"><i class="bi bi-box-arrow-in-down-left"></i></button>
                    </div>
                    <span class="text-danger fixed-validation-message">@Html.ValidationMessageFor(m => m.StartTimestamp)</span>
                </div>

                <div class="d-flex flex-column align-items-center">
                    <div>
                        <span class="thick">To:</span>
                        @Html.TextBoxFor(m => m.EndTimestamp, new { id = "videoEndInput", placeholder = "hh:mm:ss", @class = "timeInput" })
                        <button type="button" title="Get current time" class="btn standard-btn" onclick="updateInputFromPlayer('videoEndInput')"><i class="bi bi-box-arrow-in-down-left"></i></button>
                    </div>
                    <span class="text-danger fixed-validation-message">@Html.ValidationMessageFor(m => m.EndTimestamp)</span>
                </div>

                <div class="d-flex flex-column align-items-center">
                    <div>
                        <span class="thick">Length (sec):</span>
                        @Html.TextBoxFor(m => m.ClipLength, new { id = "videoLengthInput" })
                    </div>
                    <span class="text-danger fixed-validation-message">@Html.ValidationMessageFor(m => m.ClipLength)</span>
                </div>
            </div>

            <div class="d-flex justify-content-between flex-wrap">
                <div class="d-flex gap-3">
                    <span class="thick">Format:</span>
                    @foreach (var value in Enum.GetValues(typeof(ClipYT.Enums.Format)))
                    {
                        <div>
                            @Html.RadioButtonFor(m => m.Format, value, new { @class = "form-check-input" })
                            @Html.Label(value.ToString())
                        </div>
                    }
                </div>
                <div class="d-flex gap-3">
                    <span class="thick">Quality:</span>
                    @foreach (var value in Enum.GetValues(typeof(ClipYT.Enums.Quality)))
                    {
                        <div>
                            @Html.RadioButtonFor(m => m.Quality, value, new { @class = "form-check-input" })
                            @if (string.Equals(value, ClipYT.Enums.Quality.Enough))
                            {
                                @Html.Label(null, value.ToString(), new { @class = "pixelated" })
                            }
                            else
                            {
                                @Html.Label(value.ToString())
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script src="https://www.youtube.com/iframe_api"></script>

    <script>
        var player;
        var playerReady = false;
        var lastTimeUpdate = 0;
        var iframeWindow;

        function onYouTubeIframeAPIReady() {
            player = new YT.Player('player', {
                height: '100%',
                width: '100%',
                events: {
                    'onReady': () => {
                        playerReady = true;
                        iframeWindow = player.getIframe().contentWindow;
                    }
                }
            });
        }

        function updateInputFromPlayer(inputElementId) {
            var currentTime = player.getCurrentTime();
            const element = document.getElementById(inputElementId);
            element.value = convertToTimestampFormat(currentTime);

            const e = new Event("change");
            element.dispatchEvent(e); // manually trigger the 'change' event
        }

        function convertToTimestampFormat(seconds) {
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const remainingSeconds = Math.floor(seconds % 60);

            const formattedHours = hours < 10 ? `0${hours}` : hours;
            const formattedMinutes = minutes < 10 ? `0${minutes}` : minutes;
            const formattedSeconds = remainingSeconds < 10 ? `0${remainingSeconds}` : remainingSeconds;

            return `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;
        }
    </script>

    <script>
        $(document).ready(function () {
            $("#urlInput").on('input', function () {
                if (isYoutubeUrlValid($(this).val())) {
                    updateVideoFrame($(this).val());
                }
            });

            function isYoutubeUrlValid(url) {
                var regex = @Html.Raw(Json.Serialize(RegexConstants.YoutubeUrlRegex));

                return url.match(regex);
            }

            function getIdFromYoutubeUrl(url) {
                var regExp = /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#&?]*).*/;
                var match = url.match(regExp);

                return (match && match[7].length == 11) ? match[7] : false;
            }

            async function updateVideoFrame(videoUrl) {
                await waitForPlayerToBeLoaded();
                var videoId = getIdFromYoutubeUrl(videoUrl);
                player.cueVideoById(videoId);
                $("#player-container").show();
                $("#video-details").show();
            }

            function waitForPlayerToBeLoaded() {
                return new Promise(resolve => {
                    const interval = setInterval(() => {
                        if (playerReady === true) {
                            clearInterval(interval);
                            resolve();
                        }
                    }, 100);
                });
            }

            function isValidTimeFormat(timeStr) {
                const timeFormatRegex = @Html.Raw(Json.Serialize(RegexConstants.TimeFormatRegex));

                return timeStr.match(timeFormatRegex);
            }

            function updateVideoLengthInput() {
                const startTimeStr = document.getElementById("videoStartInput").value;
                const endTimeStr = document.getElementById("videoEndInput").value;

                if (!isValidTimeFormat(startTimeStr) || !isValidTimeFormat(endTimeStr)) {
                    return;
                }

                const startTime = new Date(`1970-01-01T${startTimeStr}`);
                const endTime = new Date(`1970-01-01T${endTimeStr}`);

                const timeDifference = (endTime - startTime) / 1000;

                document.getElementById("videoLengthInput").value = timeDifference;
            }

            document.getElementById("videoEndInput").addEventListener("change", updateVideoLengthInput);
            document.getElementById("videoStartInput").addEventListener("change", updateVideoLengthInput);

            function updateVideoEndInput() {
                const startTimeStr = document.getElementById("videoStartInput").value;
                const videoLengthStr = document.getElementById("videoLengthInput").value;

                if (!isValidTimeFormat(startTimeStr) || isNaN(videoLengthStr)) {
                    return;
                }

                const startTime = new Date(`1970-01-01T${startTimeStr}`);

                const videoLengthSeconds = parseInt(videoLengthStr);

                const endTimeMilliseconds = startTime.getTime() + (videoLengthSeconds * 1000);

                const endTime = new Date(endTimeMilliseconds);

                const endTimeFormatted = `${String(endTime.getHours()).padStart(2, '0')}:${String(endTime.getMinutes()).padStart(2, '0')}:${String(endTime.getSeconds()).padStart(2, '0')}`;

                document.getElementById("videoEndInput").value = endTimeFormatted;
            }

            document.getElementById("videoStartInput").addEventListener("change", updateVideoEndInput);
            document.getElementById("videoLengthInput").addEventListener("change", updateVideoEndInput);
        });
    </script>
}
