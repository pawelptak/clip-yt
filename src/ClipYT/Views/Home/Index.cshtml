@using ClipYT.Constants;
@model VideoModel
@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
    <div id="player" style="display: none"></div>
</div>

@using (Html.BeginForm("DownloadVideo", "Home", FormMethod.Post))
{
    <span>Paste url:</span> @Html.TextBoxFor(m => m.Url, new { id = "urlInput" })
    <input id="Submit" type="submit" value="submit" />
    <br />
    <span class="text-danger">@Html.ValidationMessageFor(m => m.Url)</span>
    <br />
    <span>From:</span> @Html.TextBoxFor(m => m.StartTimestamp, new { id = "videoStartInput", placeholder = "hh:mm:ss"})
    <br />
    <span class="text-danger">@Html.ValidationMessageFor(m => m.StartTimestamp)</span>
    <br />
    <span>To:</span> @Html.TextBoxFor(m => m.EndTimestamp, new { id = "videoEndInput", placeholder = "hh:mm:ss"})
    <br />
    <span class="text-danger">@Html.ValidationMessageFor(m => m.EndTimestamp)</span>
    <br />
    <span>Length (s):</span> @Html.TextBoxFor(m => m.ClipLength, new { id = "videoLengthInput"})
    <br />
    <span class="text-danger">@Html.ValidationMessageFor(m => m.ClipLength)</span>
    <br />
}


@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script src="https://www.youtube.com/iframe_api"></script>

    <script>
        var player;
        var playerReady = false;
        var lastTimeUpdate = 0;
        var iframeWindow;

        function onYouTubeIframeAPIReady() {
            player = new YT.Player('player', {
                height: '390',
                width: '640',
                events: {
                    'onReady': () => {
                        playerReady = true;
                        iframeWindow = player.getIframe().contentWindow;
                    }
                }
            });
        }

        // Listen to player time change
        window.addEventListener("message", function (event) {
            if (event.source === iframeWindow) {
                var data = JSON.parse(event.data);

                if (data.event === "infoDelivery" && data.info && data.info.currentTime
                ) {
                    var time = Math.floor(data.info.currentTime);

                    if (time !== lastTimeUpdate) {
                        lastTimeUpdate = time;
                        updateVideoStartInput(time);
                    }
                }
            }
        });

        function updateVideoStartInput(timeInSeconds) {
            const element = document.querySelector('#videoStartInput')
            element.value = convertToTimestampFormat(timeInSeconds);

            const e = new Event("change");
            element.dispatchEvent(e); // manually trigger the 'change' event
        }

        function convertToTimestampFormat(seconds) {
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const remainingSeconds = Math.floor(seconds % 60);

            const formattedHours = hours < 10 ? `0${hours}` : hours;
            const formattedMinutes = minutes < 10 ? `0${minutes}` : minutes;
            const formattedSeconds = remainingSeconds < 10 ? `0${remainingSeconds}` : remainingSeconds;

            return `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;
        }
    </script>

    <script>
        $(document).ready(function () {
            $("#urlInput").on('input', function () {
                if (isYoutubeUrlValid($(this).val())) {
                    updateVideoFrame($(this).val());
                }
            });

            function isYoutubeUrlValid(url) {
                var regex = @Html.Raw(Json.Serialize(RegexConstants.YoutubeUrlRegex));

                return url.match(regex);
            }

            function getIdFromYoutubeUrl(url) {
                var regExp = /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#&?]*).*/;
                var match = url.match(regExp);

                return (match && match[7].length == 11) ? match[7] : false;
            }

            async function updateVideoFrame(videoUrl) {
                await waitForPlayerToBeLoaded();
                var videoId = getIdFromYoutubeUrl(videoUrl);
                player.cueVideoById(videoId);
                $("#player").show();
            }

            function waitForPlayerToBeLoaded() {
                return new Promise(resolve => {
                    const interval = setInterval(() => {
                        if (playerReady === true) {
                            clearInterval(interval);
                            resolve();
                        }
                    }, 100);
                });
            }

            function isValidTimeFormat(timeStr) {
                const timeFormatRegex = @Html.Raw(Json.Serialize(RegexConstants.TimeFormatRegex));

                return timeStr.match(timeFormatRegex);
            }

            function updateVideoLengthInput() {
                const startTimeStr = document.getElementById("videoStartInput").value;
                const endTimeStr = document.getElementById("videoEndInput").value;

                if (!isValidTimeFormat(startTimeStr) || !isValidTimeFormat(endTimeStr)) {
                    return;
                }

                const startTime = new Date(`1970-01-01T${startTimeStr}`);
                const endTime = new Date(`1970-01-01T${endTimeStr}`);

                const timeDifference = (endTime - startTime) / 1000;

                document.getElementById("videoLengthInput").value = timeDifference;
            }

            document.getElementById("videoEndInput").addEventListener("change", updateVideoLengthInput);

            function updateVideoEndInput() {
                const startTimeStr = document.getElementById("videoStartInput").value;
                const videoLengthStr = document.getElementById("videoLengthInput").value;

                if (!isValidTimeFormat(startTimeStr) || isNaN(videoLengthStr)) {
                    return;
                }

                const startTime = new Date(`1970-01-01T${startTimeStr}`);

                const videoLengthSeconds = parseInt(videoLengthStr);

                const endTimeMilliseconds = startTime.getTime() + (videoLengthSeconds * 1000);

                const endTime = new Date(endTimeMilliseconds);

                const endTimeFormatted = `${String(endTime.getHours()).padStart(2, '0')}:${String(endTime.getMinutes()).padStart(2, '0')}:${String(endTime.getSeconds()).padStart(2, '0')}`;

                document.getElementById("videoEndInput").value = endTimeFormatted;
            }

            document.getElementById("videoStartInput").addEventListener("change", updateVideoEndInput);
            document.getElementById("videoLengthInput").addEventListener("change", updateVideoEndInput);
        });
    </script>
}
