@using ClipYT.Constants;
@model VideoModel
@{
    ViewData["Title"] = "Home Page";
}

<div class="d-flex flex-column align-items-center content">
    <div class="mb-4" id="player"></div>

    @using (Html.BeginForm("DownloadVideo", "Home", FormMethod.Post))
    {
        <div class="d-flex justify-content-center gap-2 mb-4 align-items-center">
            <div class="d-flex flex-column align-items-center">
                @Html.TextBoxFor(m => m.Url, new { id = "urlInput", placeholder = "Paste YouTube video URL" })
                <span class="text-danger">@Html.ValidationMessageFor(m => m.Url)</span>
            </div>
            <div class="submitButton">
                <input type="submit" name="" value="">
            </div>

            @* <input id="submitButton" type="submit" value="submit"> *@
            @*             <button id="submitButton" type="submit">
        <img src="~/images/play_button.png" width="50" height="50" alt="submit" />
        </button> *@
        </div>

        @* Todo: make these visible along with the video player *@
        <div class="d-flex align-items-center gap-3">
            <div class="d-flex flex-column align-items-center">
                <div>
                    <span>From:</span>
                    @Html.TextBoxFor(m => m.StartTimestamp, new { id = "videoStartInput", placeholder = "hh:mm:ss", @class = "timeInput"})
                </div>
                <span class="text-danger">@Html.ValidationMessageFor(m => m.StartTimestamp)</span>
            </div>

            <div class="d-flex flex-column align-items-center">
                <div>
                    <span>To:</span>
                    @Html.TextBoxFor(m => m.EndTimestamp, new { id = "videoEndInput", placeholder = "hh:mm:ss", @class = "timeInput"})
                </div>
                <span class="text-danger">@Html.ValidationMessageFor(m => m.EndTimestamp)</span>
            </div>

            <div class="d-flex flex-column align-items-center">
                <div>
                    <span>Length (sec):</span>
                    @Html.TextBoxFor(m => m.ClipLength, new { id = "videoLengthInput"})
                </div>
                <span class="text-danger">@Html.ValidationMessageFor(m => m.ClipLength)</span>
            </div>

        </div>
    }
</div>


@* TODO: move style to separate file *@
<style>
    .content {
        margin-top: 50px;
    }

    #player {
        border-radius: 12px;
        display: none;
    }

    #urlInput {
        min-width: 400px;
    }

    .timeInput {
        max-width: 110px;
    }

    #videoLengthInput {
        max-width: 80px;
    }

    input[type=text] {
        border-radius: 20px;
        padding: .3em;
        padding-left: 20px;
        padding-right: 20px;
        border: 1px solid transparent;
        background-color: var(--dark-grey);
        color: white;
    }

        input[type=text]:focus {
            outline: none !important;
            border: 1px solid var(--accent-color);
        }

        input[type=text]::placeholder {
            color: var(--light-grey);
        }


/*         Todo: change the button to not use png */
    .submitButton {
        height: 50px;
    }

        .submitButton input {
            background: url(/images/play_button.png) no-repeat;
            background-size: 50px;
            width: 50px;
            height: 50px;
            cursor: pointer;
            border: none;
        }
</style>


@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script src="https://www.youtube.com/iframe_api"></script>

    <script>
        var player;
        var playerReady = false;
        var lastTimeUpdate = 0;
        var iframeWindow;

        function onYouTubeIframeAPIReady() {
            player = new YT.Player('player', {
                height: '390',
                width: '640',
                events: {
                    'onReady': () => {
                        playerReady = true;
                        iframeWindow = player.getIframe().contentWindow;
                    }
                }
            });
        }

        // Listen to player time change
        window.addEventListener("message", function (event) {
            if (event.source === iframeWindow) {
                var data = JSON.parse(event.data);

                if (data.event === "infoDelivery" && data.info && data.info.currentTime
                ) {
                    var time = Math.floor(data.info.currentTime);

                    if (time !== lastTimeUpdate) {
                        lastTimeUpdate = time;
                        updateVideoStartInput(time);
                    }
                }
            }
        });

        function updateVideoStartInput(timeInSeconds) {
            const element = document.querySelector('#videoStartInput')
            element.value = convertToTimestampFormat(timeInSeconds);

            const e = new Event("change");
            element.dispatchEvent(e); // manually trigger the 'change' event
        }

        function convertToTimestampFormat(seconds) {
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const remainingSeconds = Math.floor(seconds % 60);

            const formattedHours = hours < 10 ? `0${hours}` : hours;
            const formattedMinutes = minutes < 10 ? `0${minutes}` : minutes;
            const formattedSeconds = remainingSeconds < 10 ? `0${remainingSeconds}` : remainingSeconds;

            return `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;
        }
    </script>

    <script>
        $(document).ready(function () {
            $("#urlInput").on('input', function () {
                if (isYoutubeUrlValid($(this).val())) {
                    updateVideoFrame($(this).val());
                }
            });

            function isYoutubeUrlValid(url) {
                var regex = @Html.Raw(Json.Serialize(RegexConstants.YoutubeUrlRegex));

                return url.match(regex);
            }

            function getIdFromYoutubeUrl(url) {
                var regExp = /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#&?]*).*/;
                var match = url.match(regExp);

                return (match && match[7].length == 11) ? match[7] : false;
            }

            async function updateVideoFrame(videoUrl) {
                await waitForPlayerToBeLoaded();
                var videoId = getIdFromYoutubeUrl(videoUrl);
                player.cueVideoById(videoId);
                $("#player").show();
            }

            function waitForPlayerToBeLoaded() {
                return new Promise(resolve => {
                    const interval = setInterval(() => {
                        if (playerReady === true) {
                            clearInterval(interval);
                            resolve();
                        }
                    }, 100);
                });
            }

            function isValidTimeFormat(timeStr) {
                const timeFormatRegex = @Html.Raw(Json.Serialize(RegexConstants.TimeFormatRegex));

                return timeStr.match(timeFormatRegex);
            }

            function updateVideoLengthInput() {
                const startTimeStr = document.getElementById("videoStartInput").value;
                const endTimeStr = document.getElementById("videoEndInput").value;

                if (!isValidTimeFormat(startTimeStr) || !isValidTimeFormat(endTimeStr)) {
                    return;
                }

                const startTime = new Date(`1970-01-01T${startTimeStr}`);
                const endTime = new Date(`1970-01-01T${endTimeStr}`);

                const timeDifference = (endTime - startTime) / 1000;

                document.getElementById("videoLengthInput").value = timeDifference;
            }

            document.getElementById("videoEndInput").addEventListener("change", updateVideoLengthInput);

            function updateVideoEndInput() {
                const startTimeStr = document.getElementById("videoStartInput").value;
                const videoLengthStr = document.getElementById("videoLengthInput").value;

                if (!isValidTimeFormat(startTimeStr) || isNaN(videoLengthStr)) {
                    return;
                }

                const startTime = new Date(`1970-01-01T${startTimeStr}`);

                const videoLengthSeconds = parseInt(videoLengthStr);

                const endTimeMilliseconds = startTime.getTime() + (videoLengthSeconds * 1000);

                const endTime = new Date(endTimeMilliseconds);

                const endTimeFormatted = `${String(endTime.getHours()).padStart(2, '0')}:${String(endTime.getMinutes()).padStart(2, '0')}:${String(endTime.getSeconds()).padStart(2, '0')}`;

                document.getElementById("videoEndInput").value = endTimeFormatted;
            }

            document.getElementById("videoStartInput").addEventListener("change", updateVideoEndInput);
            document.getElementById("videoLengthInput").addEventListener("change", updateVideoEndInput);
        });
    </script>
}
